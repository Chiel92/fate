SHORT TERM
Reset mode after operation
Make openline correctly repeatable
    Add a decorator @repeatable. How to decorate actions/callables defined by classes?
    option 1: rewrite OpenLine without using Compose
    option 2: only make actions repeatable which require additional user input
        repeating then means executing and feeding the same input as before
        so we need to store user input instead of actions: revise paradigm
Select around/inside (not finished yet)
Incorporate testing with multiple sessions
Check if we can specify multiple testruns more easily in the unittest framework
unittests for pattern select machinery

LONG TERM
Make labeling generation asynchronous
Persistent session (using a context manager?)
Improve syntax highlighting, for instance by disregarding quotes inside comments and strings
    select around should maybe also disregard brackets etc in comments and strings
Contextual completion
    For completion it is also needed that the full text can be constructed including the pending operation. (No it isn't!! Only filtering is done based on the input, the context is not changed)
Some sort of semantic snippet recognition, e.g. two identifiers that always need to be the same. If one changes, the other changes with it.
Switch to alternative regex engine?
Focus on non-atomic operations
Idea: jumplist of lines of changes

RESEARCH
Optimal configurable datastructure for text editing
    optimize it for linenumber queries as well, not only for char numbers
Optimal configurable datastructure for labeling/syntax highlighting
Store additional metadata such as the number of line breaks in a certain range
Executing regex over the whole text should be fast, so is this case we want lookup to be constant time (amortized)
